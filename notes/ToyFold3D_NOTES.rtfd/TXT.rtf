{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf840
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red0\green0\blue0;\red255\green255\blue255;
\red255\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;\csgray\c0;\csgray\c100000;
\csgenericrgb\c100000\c0\c0;}
\margl1440\margr1440\vieww17600\viewh18300\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf2 \ul \ulc2 25 May, 2020\
\ulnone \

\b Let\'92s do the bare minimum to simulate an RNA chain\

\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs26 \cf3 \cb4 \CocoaLigature0 toyfold3_test.m
\f0\fs24 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \

\fs18 void\
get_stub_stub( conformation::Residue const & rsd1,\
    conformation::Residue const & rsd2,\
    kinematics::Stub & stub1,\
    kinematics::Stub & stub2,\
    StubStubType const & stub_stub_type )\
\{\
    using namespace core::kinematics;\
    using Matrix = numeric::xyzMatrix<Real>;\
    switch ( stub_stub_type ) \{\
    case O3P_TO_O5P :\
        // takeoff\
        stub1 = Stub( rsd1.xyz( " O3'") /* center */,\
            rsd1.xyz( " O3'") /* a */,\
            rsd1.xyz( " C3'") /* b  [b->a defines x] */,\
            rsd1.xyz( " C4'") /* c  [c->b defines y] */ );\
        stub1.M = Matrix::cols( stub1.M.col_y(), stub1.M.col_z(), stub1.M.col_x() ); // Prefer to have C3'->O3' (takeoff vector) along z\
\
        // landing\
        stub2 = Stub( rsd2.xyz( " O5'") /* center */,\
            rsd2.xyz( " C5'") /* a */,\
            rsd2.xyz( " O5'") /* b  [b->a defines x] */,\
            rsd2.xyz( " C4'") /* c  [c->b defines y] */ );\
        stub2.M = Matrix::cols( stub2.M.col_y(), stub2.M.col_z(), stub2.M.col_x() ); // Prefer to have O5'->C5' (landing vector) along z\
        return;\
\'85\

\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 8.20.03 AM.png \width9540 \height8300
}¬}\
\
As a quick test case, use 4ybb_DomainIII.\
\
Capture coordinate systems set up on O5\'92  \
Point z-vectors from O5\'92 to C5\'92 (thick black), and x vectors out from O5\'92 to C4\'92 (thin black). Below also show y as gray very thin.  \
This is the \'93landing\'94 coordinate frame that I used in loop_close.\
\
So: transforms that go from one landing frame to the next capture: delta, (chi), epsilon, zeta, alpha, beta, gamma, which should hopefully capture delta-epsilon, delta-chi, and zeta-alpha correlations. \cf5 NOTE ERROR \'97 SHOULD USE C5\'92-C4\'92-C3\'92 traces; fixed below.\cf0 \
\
\
Generate random traces with these O5\'92 \'97> O5\'92 transforms:\
 {{\NeXTGraphic Screen Shot 2020-05-25 at 8.58.37 AM.png \width6840 \height4620
}¬}{{\NeXTGraphic Screen Shot 2020-05-25 at 8.58.34 AM.png \width3940 \height5460
}¬}\
\
Fixed an error above in deriving frames (forgot to normalize y vector)\
Copied/pasted in KDE code from toyfold2 (get_kde_bandwidth & get_C_eff_from_pts) to estimate density at 0,0,0,0,0,0. \
Works! \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 10.57.51 AM.png \width17420 \height5680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
Jumps up to near 20 mM ar N~8!  \
Expect > 1 uM for N~few 100, since that\'92s the basis of circularization of strands for sequencing assays \'97> checks out.\
\
TODO\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \'95\'a0fix molar conversion 
\b DONE
\b0 \
\'95 Document all scripts 
\b DONE
\b0 \
\'95 separate out toyfold2 import scripts into separate subdirectory 
\b DONE
\b0 \
\'95\'a0read in full 4ybb 23S as fragment source 
\b DONE
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \'95\'a0Switch coordinate frames from O5\'92-C5\'92-C4\'92 to C5\'92-C4\'92-C3\'92 to avoid phosphate & gamma defining coordinate frame \'97> note conceptual error above 
\b DONE
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \'95\'a0check chain when assigning atoms 
\b DONE
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \'95\'a0put in chain break filter (record o3\'92 and p xyz) 
\b DONE
\b0 \
\'95 create reverse trajectories (quickest may be to write reverse_transform function). Use KDE cross check on C_eff.\
\'95\'a0Write circular trajectory sampler, again copy of toy fold work\
\
\
After documentation \'97 yes, getting similar C_eff:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 11.39.22 AM.png \width10600 \height8660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Repeat with reading in full 23S from 4ybb\'85 phew MATLAB pdbread() function is sloooooow. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 12.04.33 PM.png \width6120 \height5440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
But computation of C_eff remains fast: \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 12.03.00 PM.png \width10320 \height8600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\ul Switch to C5\'92-C4\'92-C3\'92 triad\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ulnone Trajectories look more intuitive\'85\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 12.13.29 PM.png \width5120 \height6320
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 12.13.43 PM.png \width5260 \height7180
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
But C_eff is lower by ~2x. Why is that? And noisier?\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 12.16.12 PM.png \width10100 \height8680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Oh it might have to do with not using sin^2(q)/q^2 weighting\'85 [uh but that should be unity at origin].\
\
\
Try overlap based  KDE computation. Pretty fast, just like in ToyFold 2D calls\'97 able to just run 2000 cycles\
Getting poor agreement when coming in from different sides, e.g. for 10-nt loop, with jumps who going all the way around\'85\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 1.17.10 PM.png \width10300 \height5800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 About a 2x jump! Note that left-hand-most points above correspond to precious calculations \
for full 10-mer finding origin (0,0,0,0,0,0). Above is only for 10-nt loop.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
If we compare overlap from f/r for different size loops using n/2 and n/2 for steps forward and reverse, seeing \
a systematic underestimation compared to more costly full calculations above:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 1.16.35 PM.png \width9760 \height5600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\b Current paradoxes:
\b0 \
\'95 Why did changing coordinate frame form O5\'92-C5\'92-C4\'92 to C5\'92-C4\'92-C3\'92 results in a drop of C_eff by factor of two? Should actually be able to figure this out with extremely small fragment library, or even an artificial \'91model library\'92. Could be some weirdo correlation between gamma and delta, perhaps due to helix/loop sections in fragments?\
\'95 Why does overlap calculation underestimate true C_eff? May have something to do with hard boundaries of Euler vector space at +/-pi? But how could we re-center? Do we need SE(3) KDE, e.g. nuklei? http://nuklei.sourceforge.net/doxygen/\
\

\i Should we still barrel forward with backtracing?\

\i0 \
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
}