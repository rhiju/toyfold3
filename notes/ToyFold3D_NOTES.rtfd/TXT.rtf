{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf840
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red0\green0\blue0;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;\csgray\c0;\csgray\c100000;
}
\margl1440\margr1440\vieww17600\viewh18300\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf2 \ul \ulc2 25 May, 2020\
\ulnone \

\b Let\'92s do the bare minimum to simulate an RNA chain\

\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs26 \cf3 \cb4 \CocoaLigature0 toyfold3_test.m
\f0\fs24 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \

\fs18 void\
get_stub_stub( conformation::Residue const & rsd1,\
    conformation::Residue const & rsd2,\
    kinematics::Stub & stub1,\
    kinematics::Stub & stub2,\
    StubStubType const & stub_stub_type )\
\{\
    using namespace core::kinematics;\
    using Matrix = numeric::xyzMatrix<Real>;\
    switch ( stub_stub_type ) \{\
    case O3P_TO_O5P :\
        // takeoff\
        stub1 = Stub( rsd1.xyz( " O3'") /* center */,\
            rsd1.xyz( " O3'") /* a */,\
            rsd1.xyz( " C3'") /* b  [b->a defines x] */,\
            rsd1.xyz( " C4'") /* c  [c->b defines y] */ );\
        stub1.M = Matrix::cols( stub1.M.col_y(), stub1.M.col_z(), stub1.M.col_x() ); // Prefer to have C3'->O3' (takeoff vector) along z\
\
        // landing\
        stub2 = Stub( rsd2.xyz( " O5'") /* center */,\
            rsd2.xyz( " C5'") /* a */,\
            rsd2.xyz( " O5'") /* b  [b->a defines x] */,\
            rsd2.xyz( " C4'") /* c  [c->b defines y] */ );\
        stub2.M = Matrix::cols( stub2.M.col_y(), stub2.M.col_z(), stub2.M.col_x() ); // Prefer to have O5'->C5' (landing vector) along z\
        return;\
\'85\

\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 8.20.03 AM.png \width9540 \height8300
}¬}\
\
As a quick test case, use 4ybb_DomainIII.\
\
Capture coordinate systems set up on O5\'92  \
Point z-vectors from O5\'92 to C5\'92 (thick black), and x vectors out from O5\'92 to C4\'92 (thin black). Below also show y as gray very thin.  \
This is the \'93landing\'94 coordinate frame that I used in loop_close.\
\
So: transforms that go from one landing frame to the next capture: delta, (chi), epsilon, zeta, alpha, beta, gamma, which should hopefully capture delta-epsilon, delta-chi, and zeta-alpha correlations.\
\
\
Generate random traces with these O5\'92 \'97> O5\'92 transforms:\
 {{\NeXTGraphic Screen Shot 2020-05-25 at 8.58.37 AM.png \width6840 \height4620
}¬}{{\NeXTGraphic Screen Shot 2020-05-25 at 8.58.34 AM.png \width3940 \height5460
}¬}\
\
Fixed an error above in deriving frames (forgot to normalize y vector)\
Copied/pasted in KDE code from toyfold2 (get_kde_bandwidth & get_C_eff_from_pts) to estimate density at 0,0,0,0,0,0. \
Works! \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-05-25 at 9.48.42 AM.png \width17160 \height5760
}¬}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 TODO\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \'95\'a0read in full 4ybb 23S as fragment source\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \'95\'a0Switch coordinate frames from O5\'92-C5\'92-C4\'92 to C5\'92-C4\'92-C3\'92 to avoid phosphate & gamma defining coordinate frame \'97> note conceptual error above \
\'95 Document all scripts\
\'95 separate out toyfold2 import scripts into separate subdirectory\
\'95 create reverse trajectories (quickest may be to write reverse_transform function). Use KDE cross check on C_eff.\
\'95\'a0Write circular trajectory sampler\
\
\
\
\
\
\
\
\
\
}