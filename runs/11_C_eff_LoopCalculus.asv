%%
pdbstruct = pdbread( '../data/4ybb_DIII.pdb');
stems = read_stems_toyfold3( '../data/4ybb_DIII.pdb.stems.txt' );
%pdbstruct = pdbread( '../data/4ybb_23S.pdb');
%stems = read_stems_toyfold3( '../data/4ybb_23S.pdb.stems.txt' );
%%
tic
TransformLibary = struct();
BB_dinucleotides = get_BB_dinucleotides(pdbstruct);
TransformLibrary.BB = get_transform_set( pdbstruct, BB_dinucleotides, {'C5''','C4''','C3'''},{'C5''','C4''','C3'''} );
toc
%%
tic
base_pairs = get_base_pairs_from_stems_toyfold3( stems );
TransformLibrary.BP = get_transform_set( pdbstruct, base_pairs,  {'C5''','C4''','C3'''},{'C5''','C4''','C3'''} );

%%  
% New ... needed to construct helices.
BB_stem_dinucleotides = get_BB_from_stems( stems );
TransformLibrary.BB_stem = get_transform_set( pdbstruct, BB_stem_dinucleotides,  {'C5''','C4''','C3'''},{'C5''','C4''','C3'''} );
toc

%% Just pick a single representative base pair step (since some of the dinucleotides above are a bit wacky)
TransformLibrary.BB_stem1 = get_transform_set( pdbstruct, BB_stem_dinucleotides(1),  {'C5''','C4''','C3'''},{'C5''','C4''','C3'''} );

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% visualize transforms -- should be pretty regular
%% C_eff matrix for
%     A         B
%   xxxxx     xxxx
% p |||||  q  ||||r
% xxxxxxxxxxxxxxxxx
% |_______________|
%    C_eff
%
% So total length = p+A+q+B+r
%

step_types = {};
p = 2; q = 4; r = 2;
A = 22; B = 22;
NITER = 1000;
step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB'     },1,A-1),repmat({'BB'},1,q+1),repmat({'BB'     },1,B-1),repmat({'BB'},1,r)];
[C_eff(1),C_eff_err(1)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB_stem'},1,A-1),repmat({'BB'},1,q+1),repmat({'BB'     },1,B-1),repmat({'BB'},1,r)];
[C_eff(2),C_eff_err(2)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB'     },1,A-1),repmat({'BB'},1,q+1),repmat({'BB_stem'},1,B-1),repmat({'BB'},1,r)];
[C_eff(3),C_eff_err(3)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB_stem'},1,A-1),repmat({'BB'},1,q+1),repmat({'BB_stem'},1,B-1),repmat({'BB'},1,r)];
[C_eff(4),C_eff_err(4)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );

fprintf( '\n');
tags = {'--','A-','-B','AB'};
for i = 1:4
    fprintf('%s %8.5f\n',tags{i},C_eff(i))
end
%%
NITER = 500;
%p = 2; q = 4; r = 2; which_lengths = [1:50];
p = 1; q = 1; r = 1; which_lengths = [1:5:50];
for k = 1:length(which_lengths)
    A = which_lengths(k);
    B = A;    
    fprintf( 'Doing length %d...\n',which_lengths(k));
    step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB'     },1,A-1),repmat({'BB'},1,q+1),repmat({'BB'     },1,B-1),repmat({'BB'},1,r)];
    [C_eff_scan(k,1),C_eff_scan_err(k,1)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
    step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB_stem'},1,A-1),repmat({'BB'},1,q+1),repmat({'BB'     },1,B-1),repmat({'BB'},1,r)];
    [C_eff_scan(k,2),C_eff_scan_err(k,2)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
    step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB'     },1,A-1),repmat({'BB'},1,q+1),repmat({'BB_stem'},1,B-1),repmat({'BB'},1,r)];
    [C_eff_scan(k,3),C_eff_scan_err(k,3)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
    step_types = [{'BP'},repmat({'BB'},1,p),repmat({'BB_stem'},1,A-1),repmat({'BB'},1,q+1),repmat({'BB_stem'},1,B-1),repmat({'BB'},1,r)];
    [C_eff_scan(k,4),C_eff_scan_err(k,4)] = get_C_eff_overlap_halfway( step_types, TransformLibrary, NITER );
end


semilogy( which_lengths, C_eff_scan,'linew',2 );
legend(tags)
xlabel( 'length of helix A/B.'); 
ylabel( 'C_{eff} (M)')
title( sprintf('Vary helix length: p (5'' linker) = %d, q (helix-to-helix linker)= %d, r (3'' linker) = %d',p,q,r ) )
set(gcf, 'PaperPositionMode','auto','color','white');

%%
% 
%     for q = 0:length(step_types)-1;
%         step_types_circshift = circshift( step_types, q );
%         [C_eff,C_eff_err] = get_C_eff_overlap_halfway( step_types_circshift, TransformLibrary, NITER );
% 
%         save_C_eff = [save_C_eff, C_eff];
%         save_C_eff_err = [save_C_eff_err, C_eff_err];
%         save_motif_number = [save_motif_number,n];
%         save_motif_tag = [save_motif_tag,{motif_tag}];
%         save_step_types = [save_step_types,{step_types_circshift}];
%     end

NITER = 500;
step_types_all = [repmat({'BB'},1,25)];
C_eff_25mer = get_C_eff_matrix_bruteforce( step_types_all, TransformLibrary, NITER);
%%
step_types_all = [repmat({'BB'},1,10),repmat({'BB_stem'},1,5),repmat({'BB'},1,10)];
C_eff_25mer_oligo5bound = get_C_eff_matrix_bruteforce( step_types_all, TransformLibrary, NITER);

%%
step_types_all = [repmat({'BB'},1,30)];
C_eff_30mer = get_C_eff_matrix_bruteforce( step_types_all, TransformLibrary, NITER);
step_types_all = [repmat({'BB'},1,10),repmat({'BB_stem'},1,10),repmat({'BB'},1,10)];
C_eff_30mer_oligo10bound = get_C_eff_matrix_bruteforce( step_types_all, TransformLibrary, NITER);

%%
set(figure(1),'pos',[13   454   367   350]);
subplot(2,2,1);
imagesc( C_eff_25mer,[0 0.05] )
make_lines_horizontal([0 10 15 25]);
make_lines([0 10 15 25]);
title( '25mer')

subplot(2,2,2);
imagesc( C_eff_25mer_oligo5bound,[0 0.05] )
make_lines_horizontal([0 10 15 25]); make_lines([0 10 15 25]);
title( '25mer oligo5 bound')

subplot(2,2,3);
imagesc( C_eff_30mer,[0 0.05] )
make_lines_horizontal([0:10:30]);
make_lines([0:10:30]);
title( '30mer')

subplot(2,2,4);
imagesc( C_eff_30mer_oligo10bound,[0 0.05] )
make_lines_horizontal([0:10:30]);
make_lines([0:10:30]);
title( '30mer oligo10 bound')
set(gcf, 'PaperPositionMode','auto','color','white');

%% Infer from ensemble

%% Pilot
NITER = 500;
step_types_all = [repmat({'BB'},1,10)];
tic
C_eff_10mer = get_C_eff_matrix_bruteforce( step_types_all, TransformLibrary, NITER);
toc
%%
tic
C_eff_10mer_TEST = get_C_eff_matrix_via_ensemble( step_types_all, TransformLibrary, NITER);
toc

%%
subplot(1,2,1);
imagesc( C_eff_10mer,[0 0.05] );
title( '10mer -- bruteforce');
subplot(1,2,2);
imagesc( C_eff_10mer_TEST,[0 0.05] );
title( '10mer -- reuse ensemble');
set(gcf, 'PaperPositionMode','auto','color','white');



%%
NITER = 2000;
step_types_all = [repmat({'BB'},1,10),repmat({'BB_stem'},1,5),repmat({'BB'},1,10)];
C_eff_25mer_oligo5bound_TEST = get_C_eff_matrix_via_ensemble( step_types_all, TransformLibrary, NITER);

%%
NITER = 2000;
step_types_all = [repmat({'BB'},1,10),repmat({'BB_stem'},1,5),repmat({'BB'},1,10)];
C_eff_25mer_oligo5bound_bruteforce2k = get_C_eff_matrix_bruteforce( step_types_all, TransformLibrary, NITER);

%%
set(figure(2),'pos',[57   326   570   228]);
subplot(1,2,1);
imagesc( C_eff_25mer_oligo5bound_bruteforce2k,[0 0.05] );
title( '25mer oligo5bound -- bruteforce');
make_lines_horizontal([0 10 15 25]); make_lines([0 10 15 25]);

subplot(1,2,2);
imagesc( C_eff_25mer_oligo5bound_TEST,[0 0.05] );
title( '25mer oligo5bound  -- reuse ensemble');
make_lines_horizontal([0 10 15 25]); make_lines([0 10 15 25]);
set(gcf, 'PaperPositionMode','auto','color','white');


%%
C_eff_25mer_oligo5bound_ensemble2k = C_eff_25mer_oligo5bound_TEST;
NITER = 2000;
step_types_all = repmat({'BB'},1,25);
C_eff_25mer_ensemble2k = get_C_eff_matrix_via_ensemble( step_types_all, TransformLibrary, NITER);

% OK now, let's compute log-ratio with and without oligo bound!
%% log-odds --> legit calculation for 25mer
set(figure(3),'pos',[57   126   570   228]);
subplot(1,2,1);
imagesc( log(C_eff_25mer_ensemble2k),[-6 -3] );
title( '25mer -- ensemble2k');
make_lines_horizontal([0 10 15 25]); make_lines([0 10 15 25]);

subplot(1,2,2);
imagesc( log(C_eff_25mer_oligo5bound_ensemble2k),[-6 -3] );
title( '25mer oligo5bound -- ensemble2k');
make_lines_horizontal([0 10 15 25]); make_lines([0 10 15 25]);
set(gcf, 'PaperPositionMode','auto','color','white');

%%
set(figure(4),'pos',[ 0   109   277   225]);
imagesc( -log(C_eff_25mer_oligo5bound_ensemble2k./C_eff_25mer_ensemble2k),[-2 2] );
title( '\Delta\DeltaG = -log(oligo-bound/no-oligo))');
set(gcf, 'PaperPositionMode','auto','color','white');
make_lines_horizontal([0 10 15 25]); make_lines([0 10 15 25]);
colormap( customcolormap_preset('red-white-blue') );
colorbar();

%% 
% OK now, let's compute log-ratio with and without oligo bound!
NITER = 2000;
step_types_50mer = repmat({'BB'},1,50);
C_eff_50mer_ensemble2k = get_C_eff_matrix_via_ensemble( step_types_50mer, TransformLibrary, NITER);

%%
step_types_50mer_oligo10bound = step_types_50mer;
for i = 21:30; step_types_50mer_oligo10bound{i} = 'BB_stem';end;
C_eff_50mer_oligo10bound_ensemble2k = get_C_eff_matrix_via_ensemble( step_types_50mer_oligo10bound, TransformLibrary, NITER);

%%
set(figure(3),'pos',[57   126   570   228]);
subplot(1,2,1);
imagesc( log(C_eff_50mer_ensemble2k),[-6 -3] );
title( 'C_{eff} 50mer');
bounds = [0 20 30 50];
make_lines_horizontal(bounds); make_lines(bounds);

subplot(1,2,2);
imagesc( log(C_eff_50mer_oligo10bound_ensemble2k),[-6 -3] );
title( 'C_{eff} 50mer [10-mer double helix in center]');
make_lines_horizontal(bounds); make_lines(bounds);
set(gcf, 'PaperPositionMode','auto','color','white');

%%
set(figure(4),'pos',[ 0   139   327   280]);
imagesc( -log(C_eff_50mer_oligo10bound_ensemble2k./C_eff_50mer_ensemble2k),[-2 2] );
title( '\Delta\DeltaG [50mer, oligo10] = -log(oligo-bound/no-oligo))');
set(gcf, 'PaperPositionMode','auto','color','white');
make_lines_horizontal(bounds); make_lines(bounds);
colormap( customcolormap_preset('red-white-blue') );
colorbar();

